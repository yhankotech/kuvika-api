// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Worker {
  id              String   @id @default(uuid())
  fullName        String
  email           String   @unique
  password        String
  phoneNumber     String
  serviceTypes    String[]
  location        String
  municipality    String?
  neighborhood    String?
  profession      String?
  experience      Int?
  avatar          String?
  price           Float?
  availability    String
  activationCode String?
  birth_date      DateTime?
  gender          String?
  isActive       Boolean   @default(false)
  createdAt       DateTime @default(now())

  // Relações
  serviceRequests ServiceRequest[]        @relation("WorkerRequests")
  ratingsReceived Rating[]                @relation("WorkerRatings")

  // Back relations para mensagens
  sentMessages     Message[] @relation("WorkerSentMessages")
  receivedMessages Message[] @relation("WorkerReceivedMessages")

  favoritedBy     Favorite[]   

  @@map("worker")
}

model Client {
  id        String   @id @default(uuid())
  fullName  String
  email     String   @unique
  password  String
  phone     String
  location  String
  avatar   String?
  activationCode String?
  isActive       Boolean   @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações

  serviceRequests ServiceRequest[]        @relation("ClientRequests")
  ratingsGiven    Rating[]                @relation("ClientRatings")

  // Back relations para mensagens
  sentMessages     Message[] @relation("ClientSentMessages")
  receivedMessages Message[] @relation("ClientReceivedMessages")

  favorites        Favorite[] 

  @@map("client")
}

model ServiceRequest {
  id          String   @id @default(uuid())
  clientId    String
  workerId    String
  serviceDate DateTime
  description String
  status      String 
  createdAt   DateTime @default(now())

  client      Client   @relation("ClientRequests", fields: [clientId], references: [id])
  worker      Worker   @relation("WorkerRequests", fields: [workerId], references: [id])
  rating Rating[]

  @@map("service_request")
}

model Rating {
  id        String   @id @default(uuid())
  score     Int     
  comment   String?
  clientId  String
  workerId  String
  serviceRequestId  String 
  createdAt DateTime @default(now())

  client    Client   @relation("ClientRatings", fields: [clientId], references: [id])
  worker    Worker   @relation("WorkerRatings", fields: [workerId], references: [id])
  serviceRequest    ServiceRequest @relation(fields: [serviceRequestId], references: [id])

  @@map("rating")
}

model Message {
  id           String   @id @default(uuid())
  content      String
  timestamp    DateTime @default(now())
  senderId     String
  recipientId  String
  isFromClient Boolean

 // Relações
  senderClient     Client? @relation("ClientSentMessages", fields: [senderId], references: [id], map: "fk_sender_client")
  senderWorker     Worker? @relation("WorkerSentMessages", fields: [senderId], references: [id], map: "fk_sender_worker")
  recipientClient  Client? @relation("ClientReceivedMessages", fields: [recipientId], references: [id], map: "fk_recipient_client")
  recipientWorker  Worker? @relation("WorkerReceivedMessages", fields: [recipientId], references: [id], map: "fk_recipient_worker")

  @@map("message")
}


model Favorite {
  id        String   @id @default(uuid())
  clientId  String
  workerId  String
  createdAt DateTime @default(now())

  client    Client   @relation(fields: [clientId], references: [id])
  worker    Worker   @relation(fields: [workerId], references: [id])

  @@unique([clientId, workerId])

  @@map("favorite")
}